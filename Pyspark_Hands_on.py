# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MFB80lDnBRBexJ_xTYHEKjycSEBBFAfy
"""

pip install pyspark

from pyspark.sql import SparkSession
from pyspark.sql.functions import col,count

# Initialize SparkSession
spark = SparkSession.builder \
    .appName("Product Sales Analysis") \
    .getOrCreate()

# Sample data for products
products = [
    (1, "Laptop", "Electronics", 50000),
    (2, "Smartphone", "Electronics", 30000),
    (3, "Table", "Furniture", 15000),
    (4, "Chair", "Furniture", 5000),
    (5, "Headphones", "Electronics", 2000),
]

# Sample data for sales transactions
sales = [
    (1, 1, 2),
    (2, 2, 1),
    (3, 3, 3),
    (4, 1, 1),
    (5, 4, 5),
    (6, 2, 2),
    (7, 5, 10),
    (8, 3, 1),
]

# Define schema for DataFrames
product_columns = ["ProductID", "ProductName", "Category", "Price"]
sales_columns = ["SaleID", "ProductID", "Quantity"]

# Create DataFrames
product_df = spark.createDataFrame(products, schema=product_columns)
sales_df = spark.createDataFrame(sales, schema=sales_columns)

# Show the DataFrames
print("Products DataFrame:")
product_df.show()

print("Sales DataFrame:")
sales_df.show()

# #### **Step 2: Perform the Following Tasks**

# 1. **Join the DataFrames:**
#    - Join the `product_df` and `sales_df` DataFrames on `ProductID` to create a combined DataFrame with product and sales data.

product_sales_df=product_df.join(sales_df,on="ProductID")
print("Joined DataFrame")
product_sales_df.show()

# 2. **Calculate Total Sales Value:**
#    - For each product, calculate the total sales value by multiplying the price by the quantity sold.
product_sales_df=product_sales_df.withColumn("Total_Sales_Value",col("Price")*col("Quantity"))
print("DataFrame with Total Sales Value:")
product_sales_df.show()

# 3. **Find the Total Sales for Each Product Category:**
#    - Group the data by the `Category` column and calculate the total sales value for each product category.

total_sales_by_category = product_sales_df.groupBy("Category").agg({"Total_Sales_Value": "sum"})

# Show the DataFrame with total sales by category
print("DataFrame with Total Sales by Category:")
total_sales_by_category.show()
# 4. **Identify the Top-Selling Product:**
#    - Find the product that generated the highest total sales value.
top_selling_product=product_sales_df.orderBy(col("Total_Sales_Value").desc()).first()
print(f"The top-selling product is {top_selling_product['ProductName']} with a total sales value of ₹{top_selling_product['Total_Sales_Value']}")

# 5. **Sort the Products by Total Sales Value:**
#    - Sort the products by total sales value in descending order.
sorted_products_df = product_sales_df.orderBy(col("Total_Sales_Value").desc())
print("DataFrame with Products Sorted by Total Sales Value:")
sorted_products_df.show()

# 6. **Count the Number of Sales for Each Product:**
#    - Count the number of sales transactions for each product.
sales_count_df = product_sales_df.groupBy("ProductName").agg(count("SaleID").alias("Number_of_Sales"))
print("DataFrame with Sales Count for Each Product:")
sales_count_df.show()

# 7. **Filter the Products with Total Sales Value Greater Than ₹50,000:**
#    - Filter out the products that have a total sales value greater than ₹50,000.
high_value_sales_df = product_sales_df.filter(col("Total_Sales_Value") > 50000)
print("DataFrame with Filtered Products with Total Sales Value Greater Than ₹50,000:")
high_value_sales_df.show()